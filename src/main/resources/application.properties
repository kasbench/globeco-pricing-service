spring.application.name=globeco-pricing-service

server.port=8083
server.address=0.0.0.0

# PostgreSQL Database Configuration
spring.datasource.url=jdbc:postgresql://globeco-pricing-service-postgresql:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=
spring.datasource.driver-class-name=org.postgresql.Driver

# Flyway Configuration for Spring Boot
db.migration=classpath:db/migration,classpath:org/kasbench/globeco_pricing_service/db/migration
spring.flyway.url=jdbc:postgresql://globeco-pricing-service-postgresql:5432/postgres
spring.flyway.user=postgres
spring.flyway.password=
spring.flyway.schemas=public
spring.flyway.locations=classpath:db/migration,classpath:org/kasbench/globeco_pricing_service/db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.enabled=true

# Actuator and Health Check Configuration
management.endpoints.web.exposure.include=health,info
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.endpoint.health.show-details=always
# Removed management.server.port and management.server.address to fix management context error

# Springdoc OpenAPI configuration
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html

# Micrometer OpenTelemetry (OTLP) Metrics Export
management.otlp.metrics.export.url=http://otel-collector-collector.monitoring.svc.cluster.local:4318/v1/metrics
management.otlp.metrics.export.step=1m
management.otlp.metrics.export.resource-attributes.service.name=globeco-pricing-service

# Increase logging for Micrometer OTLP registry and OpenTelemetry exporter
logging.level.io.micrometer.registry.otlp=DEBUG
logging.level.io.opentelemetry.exporter.otlp=DEBUG


